# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score, pairwise_distances
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA  # <-- –¥–æ–¥–∞–Ω–æ PCA

# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—Ä—É—á–Ω—É (–≤–∞—Ä—ñ–∞–Ω—Ç 7)
data = [
    ("–ú'—è—Å–æ —Ç–∞ –ø—Ç–∏—Ü—è —Å–≤—ñ–∂—ñ —Ç–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ", 541572.4),
    ("–ú'—è—Å–æ –∫–æ–ø—á–µ–Ω–µ, —Å–æ–ª–æ–Ω–µ —Ç–∞ –∫–æ–≤–±–∞—Å–Ω—ñ –≤–∏—Ä–æ–±–∏", 362945.1),
    ("–ö–æ–Ω—Å–µ—Ä–≤–∏, –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –º'—è—Å–Ω—ñ", 56329.0),
    ("—É —Ç–æ–º—É —á–∏—Å–ª—ñ –Ω–∞–ø—ñ–≤—Ñ–∞–±—Ä–∏–∫–∞—Ç–∏ –º'—è—Å–Ω—ñ", 25675.1),
    ("–†–∏–±–∞ —ñ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á–æ–≤—ñ", 189189.5),
    ("–ö–æ–Ω—Å–µ—Ä–≤–∏, –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ä–∏–±–Ω—ñ", 77575.7),
    ("—É —Ç–æ–º—É —á–∏—Å–ª—ñ –Ω–∞–ø—ñ–≤—Ñ–∞–±—Ä–∏–∫–∞—Ç–∏ —Ä–∏–±–Ω—ñ", 14986.4),
    ("–°–∏—Ä —Å–∏—á—É–∂–Ω–∏–π, –ø–ª–∞–≤–ª–µ–Ω–∏–π —Ç–∞ –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω–∏–π", 200410.5),
    ("–ú–∞—Å–ª–æ –≤–µ—Ä—à–∫–æ–≤–µ", 76163.2),
    ("–Ø–π—Ü—è", 558540.8),
    ("–û–ª—ñ—ó —Ä–æ—Å–ª–∏–Ω–Ω—ñ", 310499.3),
    ("–ú–∞—Ä–≥–∞—Ä–∏–Ω", 38416.2),
    ("–¶—É–∫–æ—Ä", 473388.0),
    ("–í–∏—Ä–æ–±–∏ —Ö–ª—ñ–±–æ–±—É–ª–æ—á–Ω—ñ (–∫—Ä—ñ–º –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫–∏—Ö)", 1130220.3),
    ("–í–∏—Ä–æ–±–∏ –±–æ—Ä–æ—à–Ω—è–Ω—ñ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ", 407344.4),
    ("–í–∏—Ä–æ–±–∏ —Ü—É–∫—Ä–æ–≤—ñ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å—å–∫—ñ (–≤–∫–ª—é—á–∞—é—á–∏ –º–æ—Ä–æ–∑–∏–≤–æ)", 321888.2),
    ("–ë–æ—Ä–æ—à–Ω–æ", 437108.3),
    ("–ö—Ä—É–ø–∏", 520746.0),
    ("–í–∏—Ä–æ–±–∏ –º–∞–∫–∞—Ä–æ–Ω–Ω—ñ", 294890.4),
    ("–°–≤—ñ–∂—ñ –æ–≤–æ—á—ñ", 1051920.1),
    ("—É —Ç–æ–º—É —á–∏—Å–ª—ñ –∫–∞—Ä—Ç–æ–ø–ª—è", 351936.2),
    ("–°–≤—ñ–∂—ñ –ø–ª–æ–¥–∏, —è–≥–æ–¥–∏, –≤–∏–Ω–æ–≥—Ä–∞–¥, –≥–æ—Ä—ñ—Ö–∏", 821060.3),
    ("–û–≤–æ—á—ñ —Ç–∞ —Ñ—Ä—É–∫—Ç–∏ –ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω—ñ", 64698.6),
    ("–ö–æ–Ω—Å–µ—Ä–≤–∏ –æ–≤–æ—á–µ–≤—ñ", 123524.8),
    ("–ö–æ–Ω—Å–µ—Ä–≤–∏ —Ñ—Ä—É–∫—Ç–æ–≤–æ-—è–≥—ñ–¥–Ω—ñ", 23188.8),
    ("–ì–æ—Ä—ñ–ª–∫–∞ —Ç–∞ –≤–∏—Ä–æ–±–∏ –ª—ñ–∫–µ—Ä–æ-–≥–æ—Ä—ñ–ª—á–∞–Ω—ñ", 2661929.4),
    ("–ù–∞–ø–æ—ó —Å–ª–∞–±–æ–∞–ª–∫–æ–≥–æ–ª—å–Ω—ñ", 1078581.0),
    ("–í–∏–Ω–∞", 1744243.6),
    ("–ö–æ–Ω—å—è–∫", 538598.1),
    ("–í–∏–Ω–∞ —ñ–≥—Ä–∏—Å—Ç—ñ (—à–∞–º–ø–∞–Ω—Å—å–∫–µ)", 665445.2),
    ("–ü–∏–≤–æ", 12737452.1),
    ("–ù–∞–ø–æ—ó –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ñ", 13144977.4),
    ("—É —Ç–æ–º—É —á–∏—Å–ª—ñ —Å–æ–∫–∏", 4373190.0),
    ("–í–æ–¥–∏ –º—ñ–Ω–µ—Ä–∞–ª—å–Ω—ñ", 14491449.4),
    ("–ß–∞–π, –∫–∞–≤–∞, –∫–∞–∫–∞–æ —Ç–∞ –ø—Ä—è–Ω–æ—â—ñ", 78098.5),
    ("—á–∞–π", 26342.2),
    ("–∫–∞–≤–∞", 34877.1),
    ("–°—ñ–ª—å", 167806.7),
    ("—É —Ç–æ–º—É —á–∏—Å–ª—ñ –π–æ–¥–æ–≤–∞–Ω–∞ –∫—É—Ö–æ–Ω–Ω–∞ —Å—ñ–ª—å", 24738.9)
]

# –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –º–∞—Å–∏–≤ –∑–Ω–∞—á–µ–Ω—å
labels = [item[0] for item in data]
values = np.array([item[1] for item in data]).reshape(-1, 1)

# –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
scaler = StandardScaler()
X_scaled = scaler.fit_transform(values)

# –ú–µ—Ç–æ–¥ –õ—ñ–∫—Ç—è
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++', n_init=10, max_iter=300, random_state=0)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# –ú–µ—Ç–æ–¥ –°–∏–ª—É–µ—Ç—É
silhouette_scores = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, init='k-means++', n_init=10, max_iter=300, random_state=0)
    score = silhouette_score(X_scaled, kmeans.fit_predict(X_scaled))
    silhouette_scores.append(score)

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ (–õ—ñ–∫—Ç—è —Ç–∞ –°–∏–ª—É–µ—Ç—É)
plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
plt.plot(range(1, 11), wcss, marker='o')
plt.title("–ú–µ—Ç–æ–¥ –õ—ñ–∫—Ç—è")
plt.xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
plt.ylabel("WCSS")

plt.subplot(1, 2, 2)
plt.plot(range(2, 11), silhouette_scores, marker='o', color='green')
plt.title("–ú–µ—Ç–æ–¥ –°–∏–ª—É–µ—Ç—É")
plt.xlabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤")
plt.ylabel("–°–∏–ª—É–µ—Ç–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç")
plt.tight_layout()
plt.show()

# --- –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó –º–µ—Ç–æ–¥–æ–º –ú—ñ–Ω–∫–æ–≤—Å—å–∫–æ–≥–æ ---
class KMeansMinkowski:
    def __init__(self, n_clusters=3, max_iter=300, p=4):
        self.n_clusters = n_clusters
        self.max_iter = max_iter
        self.p = p

    def fit(self, X):
        rng = np.random.default_rng(42)
        indices = rng.choice(len(X), self.n_clusters, replace=False)
        self.centroids = X[indices]
        for _ in range(self.max_iter):
            distances = pairwise_distances(X, self.centroids, metric='minkowski', p=self.p)
            labels = np.argmin(distances, axis=1)
            new_centroids = np.array([X[labels == i].mean(axis=0) for i in range(self.n_clusters)])
            if np.allclose(self.centroids, new_centroids):
                break
            self.centroids = new_centroids
        self.labels_ = labels
        return self

# --- –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è ---
model = KMeansMinkowski(n_clusters=3, p=4)
model.fit(X_scaled)

# --- Q1 ---
Q1 = sum(
    np.linalg.norm(X_scaled[i] - model.centroids[model.labels_[i]], ord=4)
    for i in range(len(X_scaled))
)

# --- –î—Ä—É–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
print("\nüß† –û–±—Ä–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤: k = 3 (–∑–≥—ñ–¥–Ω–æ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤)")
print("\nüìå –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ —Ü–µ–Ω—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ):")
for i, c in enumerate(model.centroids):
    print(f"   - –ö–ª–∞—Å—Ç–µ—Ä {i}: –¶–µ–Ω—Ç—Ä–æ—ó–¥ = {c[0]:.4f}")
print(f"\nüìê –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —è–∫–æ—Å—Ç—ñ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó Q1 = {Q1:.4f}")

print("\nüìã –†–æ–∑–ø–æ–¥—ñ–ª –æ–±'—î–∫—Ç—ñ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö:")
for cluster_id in range(3):
    print(f"\nüîπ –ö–ª–∞—Å—Ç–µ—Ä {cluster_id}:")
    for i, label in enumerate(model.labels_):
        if label == cluster_id:
            print(f"   - {labels[i]}")

# --- –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(10, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=model.labels_, cmap='viridis', s=100)
plt.title("–î–≤–æ–≤–∏–º—ñ—Ä–Ω–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ (PCA + –ú—ñ–Ω–∫–æ–≤—Å—å–∫–∏–π, p=4)")
plt.xlabel("–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 1")
plt.ylabel("–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 2")
plt.grid(True)
plt.show()
